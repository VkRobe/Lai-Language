print(print_stream : string) : int { _import_C printf; }
print_i1(print_stream : string, arg1 : int) : int { _import_C printf; }
print_i2(print_stream : string, arg1 : int, arg2 : int) : int { _import_C printf; }
print_i3(print_stream : string, arg1 : int, arg2 : int, arg3 : int) : int { _import_C printf; }

shell(shell_stream : string) : int { _import_C system; }

product := 0

recursiveMultiply(va:int,vb:int):int{
	
	value_a := va
	value_b := vb

	myFunction(1, value_a, value_b)
	
	print_i3("%d * %d = %d\n", value_a, value_b, product)
	
	myFunction(ctr : int, a:int, b:int) : int {
		product = product + a
		//Order of operations! :D
		
		if(ctr != b) {
			myFunction(ctr + 1,a,b)
		}
	}
	
	return 5
}

globalVar : int = 100

print("Hello World\n")
recursiveMultiply(1000,5)
shell("PAUSE")